#!/bin/bash
# git x <dirs...> -- clone|pull|push|grep|config|checkout
paths=()
# https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
is_first_double_dash_handled=0
while [[ "$1" != "--" ]]; do
  paths+=($1)
  shift
done
shift
if [[ $# == 0 ]]; then
  echo "No git subcommand specified!"
  exit 1
fi
sub_cmd=$1
shift

function print_meta() {
  echo -e "\033[0;31m## $1: \033[4m$(git -C $1 config --get remote.origin.url)\033[24m\033[0m"
}

function realpath {
  echo $(cd $(dirname $1); pwd)/$(basename $1);
}

function original_grep() {
  for path in "${paths[@]}"
  do
    if [[ -d $path && -d "$path/.git" ]]; then
      # slash="/"
      # escaped="\/"
      # root=$(realpath $path)
      # root="${root//$slash/$escaped}"
      # root="${path//$slash/$escaped}"
      if [[ $path == "." ]]; then
        root=""
      else
        root="$path/"
      fi
      git -C $path grep "$@" |awk '{ print "'$root'" $0 }'
    fi
  done
  # https://stackoverflow.com/questions/3915040/how-to-obtain-the-absolute-path-of-a-file-via-shell-bash-zsh-sh
  # https://stackoverflow.com/questions/13210880/replace-one-substring-for-another-string-in-shell-script
  # https://stackoverflow.com/questions/911168/how-to-detect-if-my-shell-script-is-running-through-a-pipe
  # https://stackoverflow.com/questions/2327191/preserve-colouring-after-piping-grep-to-grep
  # https://askubuntu.com/questions/674333/how-to-pass-an-array-as-function-argument
}

function grep() {
  if [[ -t 1 ]]; then
    original_grep --color=always "$@" | gitutils-pager less -r
  else
    original_grep "$@"
  fi
}

function branch_del() {
  flag="-d"
  if [[ $1 == "-D" ]]; then
    flag=$1
    shift
  fi
  if [[ $# == 0 ]]; then
    echo "No pattern specified."
    exit 0
  fi

  for path in "${paths[@]}"
  do
    if [[ -d $path && -d "$path/.git" ]]; then
      print_meta $path
      git -C $path branch $flag $(git -C $path branch --list "$@")
    fi
  done
}

if [[ $(declare -F "$sub_cmd") == "" ]]; then
  for path in "${paths[@]}"
  do
    if [[ -d $path && -d "$path/.git" ]]; then
      print_meta $path
      git -C $path $sub_cmd "$@"
    fi
  done
else
  $sub_cmd "$@"
fi

